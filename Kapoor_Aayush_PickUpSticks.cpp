//Aayush Kapoor - ICS3U - Mar. 4th, 2020 - Ms. Cullum
//Pick - Up Sticks Assignment
/*
Written description of how the computer's algorithm works:
My algorithm is program so the computer will always try and land on these number:
17, 13, 9, 5 and 1.
The reason for this is because this will always casue the user
to remove the last stick. since there is no way for the user to remove 4 or more
sticks, once the computer lands on these numbers, they will always end up on these
number no matter what number the user removes. If the user lands on the golden number,
the computer will remove 3 sticks and depending on the user's next input, the computer
will try to return to these golden numbers. Whenever the computer ever lands on one of these
golden numbers, the computer will always win no mater what.

How do you know that your algorithm is better than the random algorithm?
It was very clear that the advanced algorithm worked better than the random algorithm.
This was determined during the extension where two computers played, one being advanced
and the other being weak. In all cases that I tested, specifically 10, the advanced
alorgithm always won.

Provide a written description of why you think your algorithm is better,
and how you tested to see if it was better.
As said above, I know that my algorithm was better as I tested it in the ectension where
one computer was playing with the advanced algorithm and the other had the weak algorhithm.
I tested them 10 times and in all results the advanced algorithm won, clearly proving that
my algorithm was better than the random algorithm. The reaosn I tested it 10 times, is so
that I was certain that the reason the advanced wone was winning was truly due to the fact
that the algorithm was superior and not just due to one time mistake in the code.
It is also imporant to state that I also tested this code, after the 'play again' option was
presented. The reaosn for this is to make sure that the code would properly run and the values
of the variables would reset everytime the user wanted to play again.

*/



#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

//Prototypes functions
int advanceAlgorithm (int numberOfSticks);
int weakAlgorithm (int numberOfSticks);

int main() {
    //Initalize and declare variables
    int numberOfSticks = 0;
    int sticksRemoved = 0;
    int yesNoTwoComputers;
    int counter = 1;
    bool boolPlayAgain = true;
    bool boolComputerLoss;
    bool boolComputer1Advanced;
    bool boolComputer2Advanced;
    bool boolComputerVComputerLoss;
    char yesNoMultiplayer;
    char yesNoPlayagain;
    char Computer1 = 'q';
    char Computer2 = 'q';

    //Sets random numbers to be based on time
    srand(time(0));

    //Introduction to game
    printf("\nWelcome to the pick-up sticks game.\n\n");
    //Creates a random number
    numberOfSticks = rand() % (20 - 10 + 1) + 10;


    //This bool will continue through run the game until the user no longer wants to
    while (boolPlayAgain) {

        //Asks user if they want to play multiplayer
        fflush(stdin);
        printf("Would you like to play multiplayer(y/n)? ");
        scanf("%c", &yesNoMultiplayer);
        if (yesNoMultiplayer == 'y') {
            yesNoMultiplayer = 'y';
        } else if (yesNoMultiplayer == 'n') {
            yesNoMultiplayer = 'n';
        }

        //Gives the user options, if they want to play play multiplayer or not
        switch (yesNoMultiplayer) {

        //If user says no to multiplayer
        case 'n':

            //Asks user if they want to play against computer or watch two computers play
            fflush(stdin);
            printf("\nWould you like to play against a computer or watch two computers. Simply type, '1' or '2' respectively. ");
            scanf("%d", &yesNoTwoComputers);

            switch (yesNoTwoComputers) {

            //If user wants play against computer
            case 1:
                //Sets counter to 1, will see later
                counter = 1;
                //Intro to game
                printf("\nWelcome to pick-up sticks vs. the computer\n");
                //Sets random number
                numberOfSticks = rand() % (20 - 10 + 1) + 10;
                printf("There are %d sticks generated by the game. \n", numberOfSticks);

                //Enters loop when there are more than 0 sticks
                while (numberOfSticks > 0) {

                    sticksRemoved = 0;

                    //Human Player code
                    printf("How many sticks would you like to remove (1, 2 or 3)? ");
                    scanf("%d", &sticksRemoved);
                    //Stays in loop until the 0 enters a valid input
                    if (sticksRemoved < 0 || sticksRemoved > 3) {
                        while (sticksRemoved < 0 || sticksRemoved > 3) {
                            printf("Remove a proper number of sticks.\n");
                            printf("How many sticks would you like to remove (1, 2 or 3)? ");
                            fflush(stdin);
                            scanf("%d", &sticksRemoved);
                        }
                    }
                    numberOfSticks -= sticksRemoved;

                    //Sets number of sticks to 0 when there are negative sticks
                    if (numberOfSticks < 0){
                        numberOfSticks = 0;
                    }

                    //Prints how many sticks are left
                    sticksRemoved = 0;
                    printf("You have %d sticks left\n", numberOfSticks);

                    //If the user removes the last sticks, it will set the bool to false, indicating the computer won
                    if (numberOfSticks == 0){
                        boolComputerLoss = false;
                        break;
                    }

                    //Computer Player
                    //Enters loop when there are sticks
                    if (numberOfSticks > 0) {
                        //Removes three sticks when there is no remainder from the total number of sticks divided by 4
                        if (numberOfSticks % 4 == 0) {
                            sticksRemoved = 3;
                            numberOfSticks -= sticksRemoved;
                            printf("The computer removed %d sticks.\n", sticksRemoved);
                            printf("There are %d sticks left. \n", numberOfSticks);
                        }
                        //Removes one stick when there is one as a remainder from the total number of sticks divided by 4
                        else if (numberOfSticks % 4 == 1) {
                            sticksRemoved = 1;
                            numberOfSticks -= sticksRemoved;
                            printf("The computer removed %d sticks.\n", sticksRemoved);
                            printf("There are %d sticks left. \n", numberOfSticks);
                        }
                        /*Removes a specific amount stick (depends on remainder)
                        when there is a remainder of 2 or 3 from the total number of sticks divided by 4 */
                        else {
                            sticksRemoved = (numberOfSticks % 4) - 1;
                            numberOfSticks -= sticksRemoved;
                            //The computer brags once. Then it nevers the if statement again unless the player chooses to play again
                            if (counter == 1){
                                printf("I already won! Take that! Hahahaha!\n");
                                counter = 0;
                            }
                            printf("The computer removed %d sticks.\n", sticksRemoved);
                            printf("There are %d sticks left. \n", numberOfSticks);
                        }
                    }

                    //If the computer removes the last sticks, it will set the bool to true, indicating the player won
                    if(numberOfSticks == 0) {
                        boolComputerLoss = true;
                        break;
                    }
                }

                //Prints who won, to the screen
                if (boolComputerLoss == true) {
                    printf("\nGame Over! I lost the game, you won the game!\n\n");
                } else if (boolComputerLoss == false) {
                    printf("\nGame Over! I won the game, you lost!\n\n");
                }

                //Asks user to play again
                fflush(stdin);
                printf("Would you like to play again (y/n)? ");
                scanf("%c", &yesNoPlayagain);

                //Assgins values to the bool, triggering the while statement
                if (yesNoPlayagain == 'y') {
                    boolPlayAgain = true;
                    printf("\n\n\n");
                } else if (yesNoPlayagain == 'n') {
                    boolPlayAgain = false;
                }
                break;

            //Jumps here when the user wants to watch two computers play
            case 2:

                printf("\nWelcome to pick-up sticks, computer vs. computer!\n");
                fflush(stdin);
                //Asks user what type of algorithm the first coumputer will be
                printf("\nWould you like computer 1 to play with an advanced algorithm or weak (a/w)? ");
                scanf("%c", &Computer1);

                //Depending on the inputted value, assigns value to the bools with what type of algorithm
                if (Computer1 == 'a') {
                    boolComputer1Advanced = true;
                } else {
                    boolComputer1Advanced = false;
                }

                fflush(stdin);
                //Asks user what type of algorithm the first coumputer will be
                printf("\nWould you like computer 2 to play with an advanced algorithm or weak (a/w)? ");
                scanf("%c", &Computer2);

                //Depending on the inputted value, assigns value to the bools with what type of algorithm
                if (Computer2 == 'a') {
                    boolComputer2Advanced = true;
                } else {
                    boolComputer2Advanced = false;
                }

                //Makes both computers have adanced algorithms
                if (boolComputer1Advanced && boolComputer2Advanced) {
                    printf("\n\nYou will watch two computers with the advanced algorithm play now (computer 1 and 2).\n");
                    numberOfSticks = rand() % (20 - 10 + 1) + 10;
                    printf("There are %d sticks generated by the game. \n", numberOfSticks);
                    //Loop continues while there are more than 0 sticks
                    while (numberOfSticks > 0) {

                        //Calls adavcned algorithms telling the program how many sticks to remove
                        sticksRemoved = advanceAlgorithm(numberOfSticks);
                        numberOfSticks -= sticksRemoved;
                        printf("Computer 1 removed: %d sticks.", sticksRemoved);
                        printf("\nThere are %d sticks left.", numberOfSticks);

                        //If there are no sticks left, assigns value to bool and breals from while loop
                        if (numberOfSticks == 0) {
                            boolComputerVComputerLoss = true;
                            break;
                        }

                        //Calls adavcned algorithms telling the program how many sticks to remove
                        sticksRemoved = advanceAlgorithm(numberOfSticks);
                        numberOfSticks -= sticksRemoved;
                        printf("\nComputer 2 removed: %d sticks.", sticksRemoved);
                        printf("\nThere are %d sticks left.", numberOfSticks);
                        printf("\n\n");

                        //If there are no sticks left, assigns value to bool and breals from while loop
                        if (numberOfSticks == 0) {
                            boolComputerVComputerLoss = false;
                        }
                    }


                    //Prints off reults from game
                    if (boolComputerVComputerLoss == true) {
                        printf("\nComputer 1 lost and computer 2 won.\n");
                    } else {
                        printf("\nComputer 1 won and computer 2 lost.\n");
                    }
                }
                //Makes one computer have adanced algorithms and the other weak
                else if (boolComputer1Advanced && !boolComputer2Advanced) {
                    printf("\n\nYou will watch one advanced computer (computer 1) and one weak computer (computer 2) play.\n");
                    numberOfSticks = rand() % (20 - 10 + 1) + 10;
                    printf("There are %d sticks generated by the game. \n", numberOfSticks);
                    //Loop continues while there are more than 0 sticks
                    while (numberOfSticks > 0) {

                        //Calls adavcned algorithms telling the program how many sticks to remove
                        sticksRemoved = advanceAlgorithm(numberOfSticks);
                        numberOfSticks -= sticksRemoved;
                        printf("Computer 1 removed: %d sticks.", sticksRemoved);
                        printf("\nThere are %d sticks left.", numberOfSticks);

                        //If there are no sticks left, assigns value to bool and breals from while loop
                        if (numberOfSticks == 0) {
                            boolComputerVComputerLoss = true;
                            break;
                        }

                        //Calls weak algorithms telling the program how many sticks to remove
                        sticksRemoved = weakAlgorithm(numberOfSticks);
                        numberOfSticks -= sticksRemoved;
                        printf("\nComputer 2 removed: %d sticks.", sticksRemoved);
                        printf("\nThere are %d sticks left.", numberOfSticks);
                        printf("\n\n");
                        //If there are no sticks left, assigns value to bool and breals from while loop
                        if (numberOfSticks == 0) {
                            boolComputerVComputerLoss = false;
                        }
                    }

                    //Prints off reults from game
                    if (boolComputerVComputerLoss == false) {
                        printf("\nComputer 1 won and computer 2 lost.\n");
                    } else {
                        printf("\nComputer 2 won and computer 1 lost.\n");
                    }

                //Makes one computer have weak algorithms and the other advanced
                } else if (!boolComputer1Advanced && boolComputer2Advanced) {
                 printf("\n\nYou will watch one weak computer (computer 1) and one advanced computer (computer 2) play.\n");
                    numberOfSticks = rand() % (20 - 10 + 1) + 10;
                    printf("There are %d sticks generated by the game. \n", numberOfSticks);

                    while (numberOfSticks > 0) {
                        //Calls weak algorithms telling the program how many sticks to remove
                        sticksRemoved = weakAlgorithm(numberOfSticks);
                        numberOfSticks -= sticksRemoved;
                        printf("\nComputer 2 removed: %d sticks.", sticksRemoved);
                        printf("\nThere are %d sticks left.", numberOfSticks);
                        printf("\n\n");
                        //If there are no sticks left, assigns value to bool and breals from while loop
                        if (numberOfSticks == 0) {
                            boolComputerVComputerLoss = false;
                        }

                        //Calls adavcned algorithms telling the program how many sticks to remove
                        sticksRemoved = advanceAlgorithm(numberOfSticks);
                        numberOfSticks -= sticksRemoved;
                        printf("Computer 1 removed: %d sticks.", sticksRemoved);
                        printf("\nThere are %d sticks left.", numberOfSticks);

                        //If there are no sticks left, assigns value to bool and breals from while loop
                        if (numberOfSticks == 0) {
                            boolComputerVComputerLoss = true;
                            break;
                        }
                    }

                    //Prints off reults from game
                    if (boolComputerVComputerLoss == false) {
                        printf("\nComputer 1 won and computer 2 lost.\n");
                    } else {
                        printf("\nComputer 2 won and computer 1 lost.\n");
                    }

                //Makes both computers have adanced algorithms
                } else if (!boolComputer1Advanced && !boolComputer2Advanced) {
                 printf("\n\nYou will watch one weak computer (computer 1) and one weak computer (computer 2) play.\n");
                    numberOfSticks = rand() % (20 - 10 + 1) + 10;
                    printf("There are %d sticks generated by the game. \n", numberOfSticks);
                    while (numberOfSticks > 0) {
                        //Calls weak algorithms telling the program how many sticks to remove
                        sticksRemoved = weakAlgorithm(numberOfSticks);
                        numberOfSticks -= sticksRemoved;
                        printf("\nComputer 1 removed: %d sticks.", sticksRemoved);
                        printf("\nThere are %d sticks left.", numberOfSticks);
                        printf("\n\n");
                        //If there are no sticks left, assigns value to bool and breals from while loop
                        if (numberOfSticks == 0) {
                            boolComputerVComputerLoss = false;
                        }

                        //Calls weak algorithms telling the program how many sticks to remove
                        sticksRemoved = weakAlgorithm(numberOfSticks);
                        numberOfSticks -= sticksRemoved;
                        printf("\nComputer 2 removed: %d sticks.", sticksRemoved);
                        printf("\nThere are %d sticks left.", numberOfSticks);
                        printf("\n\n");
                        //If there are no sticks left, assigns value to bool and breals from while loop
                        if (numberOfSticks == 0) {
                            boolComputerVComputerLoss = false;
                        }
                    }

                    //Prints off reults from game
                    if (boolComputerVComputerLoss == false) {
                        printf("\nComputer 1 won and computer 2 lost.\n");
                    } else {
                        printf("\nComputer 2 won and computer 1 lost.\n");
                    }
                }

                    //Asks user if they would like to play again
                    fflush(stdin);
                    printf("\nWould you like to play again (y/n)? ");
                    scanf("%c", &yesNoPlayagain);

                    //If user inputs 'y' then the game will restart
                    if (yesNoPlayagain == 'y') {
                        boolPlayAgain = true;
                        yesNoMultiplayer = 'q';
                        yesNoPlayagain = 'q';
                        printf("\n\n\n");
                    }
                    //If user inputs 'n' then the game will restart
                    else if (yesNoPlayagain == 'n') {
                        boolPlayAgain = false;
                        yesNoMultiplayer = 'q';
                        yesNoPlayagain = 'q';
                    }
                //Exits loop
                break;
            }
            //Exits loop
            break;

        //If user wants to play multiplayer, the program will jump to here and run
        case 'y':
            //Introduction Message
            printf("\nWelcome to pick-up sticks, human vs. human");

            //Selects random number of sticks
            numberOfSticks = rand() % (20 - 10 + 1) + 10;
            //Prints the random number
            printf("\nThere are %d sticks generated by the game. \n\n", numberOfSticks);
            sticksRemoved = 0;

            //Enters the loop when there are more than 0 sticks
            while (numberOfSticks > 0) {

                ///Player 1
                printf("\nPlayer 1:\n");

                sticksRemoved = 0;

                //Asks user how many sticks they would like to remove if there are more than 0 sticks left
                if (numberOfSticks > 0){
                    printf("How many sticks would you like to remove (1, 2 or 3)? ");
                    scanf("%d", &sticksRemoved);
                }

                //Enters this loop if the user enters an invalid number of sticks they would like to remove
                //Will continue to loop until the person removes a valid number of sticks
                if (sticksRemoved < 0 || sticksRemoved > 3) {
                    while (sticksRemoved < 0 || sticksRemoved > 3) {
                        sticksRemoved = 0;
                        printf("Remove a proper number of sticks.\n");
                        printf("How many sticks would you like to remove (1, 2 or 3)? ");
                        fflush(stdin);
                        scanf("%d", &sticksRemoved);
                    }
                }

                //Prints how many sticks Player 1 removed
                printf("Player 1 removed %d sticks\n", sticksRemoved);
                numberOfSticks -= sticksRemoved;

                //If the user removes too many sticks, to the point where there are negative sticks, the player will lose
                if (numberOfSticks < 0){
                        numberOfSticks = 0;
                }

                //Prints how many sticks are left
                printf("There are %d sticks left\n", numberOfSticks);
                //If Player 1 removes the last few sticks, so there are 0 sticks left, Player 1 will lose
                if (numberOfSticks == 0) {
                    printf("\nPlayer 2 won.\n");
                    break;
                }

                ///Player 2
                printf("\nPlayer 2:\n");
                sticksRemoved = 0;

                //Asks user how many sticks they would like to remove if there are more than 0 sticks left
                if (numberOfSticks > 0){
                    printf("How many sticks would you like to remove (1, 2 or 3)? ");
                    scanf("%d", &sticksRemoved);
                }

                //Enters this loop if the user enters an invalid number of sticks they would like to remove
                //Will continue to loop until the person removes a valid number of sticks
                if (sticksRemoved < 0 || sticksRemoved > 3) {
                    while (sticksRemoved < 0 || sticksRemoved > 3) {
                        sticksRemoved = 0;
                        printf("Remove a proper number of sticks.\n");
                        printf("How many sticks would you like to remove (1, 2 or 3)? ");
                        fflush(stdin);
                        scanf("%d", &sticksRemoved);
                    }
                }

                //Prints how many sticks Player 2 removed
                printf("Player 2 removed %d sticks\n", sticksRemoved);
                numberOfSticks -= sticksRemoved;

                //If the user removes too many sticks, to the point where there are negative sticks, the player will lose
                if (numberOfSticks < 0){
                        numberOfSticks = 0;
                }

                //Prints how many sticks are left
                printf("There are %d sticks left\n", numberOfSticks);

                //If Player 2 removes the last few sticks, so there are 0 sticks left, Player 2 will lose
                if (numberOfSticks == 0) {
                    printf("\nPlayer 1 won.\n");
                    break;
                }
            }


            //Asks user if they would like to
            fflush(stdin);
            printf("\nWould you like to play again (y/n)? ");
            scanf("%c", &yesNoPlayagain);
            //If user inputs 'y' then the game will restart
            if (yesNoPlayagain == 'y') {
                boolPlayAgain = true;
                yesNoMultiplayer = 'q';
                yesNoPlayagain = 'q';
                printf("\n\n\n");
            }
            //If user inputs 'n' then the game will restart
            else if (yesNoPlayagain == 'n') {
                boolPlayAgain = false;
                yesNoMultiplayer = 'q';
                yesNoPlayagain = 'q';
            }

            //Leaves loop
            break;
        }
    }

    //Prints this when the user does not want to play again
    printf("\nThank you for playing, goodbye.");

    return 0;
}

//Defining weak algorithm
int weakAlgorithm (int numberOfSticks) {
    //Initaklizes and sets the number of sticks removed to 0
    int sticksRemoved = 0;
    //Runs loop when there are more than 0 sticks
    if (numberOfSticks > 0) {
        sticksRemoved = 0;
        /*When there are more than/or 3 sticks, the computer removes a
        random number of sticks between 1 and 3*/
        if (numberOfSticks >= 3){
            sticksRemoved = rand() % (3 - 1 + 1) + 1;
        }
        /*When there are 2 sticks, the computer removes a
        random number of sticks between 1 and 2*/
        else if (numberOfSticks == 2) {
            sticksRemoved = rand() % (2 - 1 + 1) + 1;
        }
        //When there is 1 stick, the computer removes 1 stick
        else if (numberOfSticks == 1) {
            sticksRemoved = 1;
        }
    //Returns a value to the calling function
    return sticksRemoved;
    }
}
//Defining advanced algorithm
int advanceAlgorithm (int numberOfSticks) {
    //Initaklizes and sets the number of sticks removed to 0
    int sticksRemoved = 0;
    //Runs loop when there are more than 0 sticks
    if (numberOfSticks > 0) {
        sticksRemoved = 0;
        //Removes three sticks when there is no remainder from the total number of sticks divided by 4
        if (numberOfSticks % 4 == 0) {
            sticksRemoved = 3;
        }
        //Removes one stick when there is one as a remainder from the total number of sticks divided by 4
        else if (numberOfSticks % 4 == 1) {
            sticksRemoved = 1;
        }
        /*Removes a specific amount stick (depends on remainder)
        when there is a remainder of 2 or 3 from the total number of sticks divided by 4 */
        else {
            sticksRemoved = (numberOfSticks % 4) - 1;
        }
        //Returns a value to the calling function
        return sticksRemoved;
    }
}
